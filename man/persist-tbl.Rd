% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/persist-tbl.R
\name{persist-tbl}
\alias{persist-tbl}
\alias{tbl_insert}
\title{Persisting data for single tables}
\usage{
tbl_insert(target, source, ..., persist = NULL)
}
\arguments{
\item{target}{Target table object.}

\item{source}{Source table object.}

\item{...}{Must be empty.}

\item{persist}{Set to \code{TRUE} for running the operation without persisting.
In this mode, a modified version of \code{target} is returned.
This allows verifying the results of an operation before actually
applying it.
Set to \code{FALSE} to perform the update on the database table.
By default, an informative message is shown.}
}
\value{
A tbl object of the same structure as \code{target}.
If \code{persist = TRUE}, \link{invisible} and identical to \code{target_dm}.
}
\description{
\lifecycle{experimental}

These methods provide a framework for updating data in existing tables.
Unlike \code{\link[=compute]{compute()}}, \code{\link[=copy_to]{copy_to()}} or \code{\link[=copy_dm_to]{copy_dm_to()}}, no new tables are created
on the database.
All operations expect that both existing and new data are presented
in two compatible \link{tbl} objects on the same data source.

These operations, in contrast to all other operations,
may lead to irreversible changes to the underlying database.
Therefore, persistence must be requested explicitly with \code{persist = TRUE}.
By default, an informative message is given.

\code{tbl_insert()} adds new records.
}
\examples{
if (rlang::is_installed("RSQLite")) {
  # Truncated table:
  flights_init <- nycflights13::flights[0, ]

  sqlite <- src_sqlite(":memory:", create = TRUE)

  # Target database:
  flights_sqlite <- copy_to(sqlite, flights_init, temporary = FALSE)
  print(count(flights_sqlite))

  # First update:
  flights_jan_1 <-
    nycflights13::flights \%>\%
    filter(month == 1, day == 1)
  print(count(flights_jan_1))

  # Copy to temporary tables on the target database:
  flights_jan_1_sqlite <- copy_to(sqlite, flights_jan_1)

  # Dry run by default:
  tbl_insert(flights_sqlite, flights_jan_1_sqlite)
  print(count(flights_sqlite))

  # Explicitly request persistence:
  tbl_insert(flights_sqlite, flights_jan_1_sqlite, persist = TRUE)
  print(count(flights_sqlite))

  # Second update:
  flights_jan_2 <-
    nycflights13::flights \%>\%
    filter(month == 1, day == 2)

  # Copy to temporary tables on the target database:
  flights_jan_2_sqlite <- copy_to(sqlite, flights_jan_2)

  # Explicit dry run:
  flights_new <- tbl_insert(
    flights_sqlite,
    flights_jan_2_sqlite,
    persist = FALSE
  )
  print(count(flights_new))
  print(count(flights_sqlite))

  # Check for consistency before applying:
  flights_new \%>\%
    dplyr::count(year, month, day)

  # Apply:
  tbl_insert(flights_sqlite, flights_jan_2_sqlite, persist = TRUE)
  print(count(flights_sqlite))
}
}
