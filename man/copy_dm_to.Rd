% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db-interface.R
\name{copy_dm_to}
\alias{copy_dm_to}
\title{Copy data model to data source}
\usage{
copy_dm_to(
  dest,
  dm,
  ...,
  types = NULL,
  overwrite = NULL,
  indexes = NULL,
  unique_indexes = NULL,
  set_key_constraints = TRUE,
  table_names = NULL,
  schema = NULL,
  temporary = TRUE
)
}
\arguments{
\item{dest}{An object of class \code{"src"} or \code{"DBIConnection"}.}

\item{dm}{A \code{dm} object.}

\item{...}{Possible further arguments passed to \code{\link[dplyr:copy_to]{dplyr::copy_to()}}, which is used on each table.}

\item{overwrite, types, indexes, unique_indexes}{Must remain \code{NULL}.}

\item{set_key_constraints}{Boolean variable, if \code{TRUE} will mirror \code{dm} key constraints on a database.}

\item{table_names}{Desired names for the tables on \code{dest}; the names within the \code{dm} remain unchanged.

If left \code{NULL} (default), the names will be determined automatically depending on the arguments \code{schema} and \code{temporary}:
\enumerate{
\item \verb{'schema = NULL}, \verb{temporary = TRUE'} (default): unique table names based on the names of the tables in the \code{dm} are created
\item \verb{'schema != NULL}, \verb{temporary = TRUE'}: schema will be ignored (a warning is issued) and unique table names are created
\item \verb{'schema = NULL}, \verb{temporary = FALSE'}: For writing permanent tables on \code{dest}, the table names in the \code{dm} are used as names for the tables on \code{dest}
\item \verb{'schema != NULL}, \verb{temporary = FALSE'}: Same as in the last point, but it is written to an \strong{existing} schema on \code{dest}
}

Alternatively, you can chose table names yourself by providing a named \code{character} or \code{ident_q} vector:
the names of this vector need to correspond to the table names in the \code{dm}, its values are the desired names on \code{dest}.
If you chose a name containing a ".", everything before it will be interpreted as a schema name and
everything after it as a table name.

Again, the table names within the \code{dm} will remain unchanged.

If \code{table_names != NULL}, names for all tables need to be provided.}

\item{schema}{If intending to write a permanent table to a DB, a name for an existing schema can be specified.}

\item{temporary}{Boolean variable, if \code{TRUE}, only temporary tables will be created.
These tables will vanish when disconnecting from the database.}
}
\value{
A \code{dm} object on the given \code{src}.
}
\description{
\code{copy_dm_to()} takes a \link[dplyr:src_dbi]{dplyr::src_dbi} object or a \code{\link[DBI:DBIConnection-class]{DBI::DBIConnection}} object as its first argument
and a \code{\link{dm}} object as its second argument.
The latter is copied to the former.
By default, temporary tables will be created and the key constraints will be set
(currently only on MSSQL and Postgres databases).
}
\details{
No tables will be overwritten; passing \code{overwrite = TRUE} to the function will give an error.
Types are determined separately for each table, setting the \code{types} argument will
also throw an error.
The arguments are included in the signature to avoid passing them via the
\code{...} ellipsis.
}
\examples{
src_sqlite <- dplyr::src_sqlite(":memory:", create = TRUE)
iris_dm <- copy_dm_to(
  src_sqlite,
  as_dm(list(iris = iris)),
  set_key_constraints = FALSE
)
}
\concept{DB interaction functions}
